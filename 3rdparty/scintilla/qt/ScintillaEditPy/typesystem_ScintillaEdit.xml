<?xml version="1.0"?>
<typesystem package="ScintillaEditPy">
	<load-typesystem name="typesystem_core.xml" generate="no" />
	<load-typesystem name="typesystem_gui_common.xml" generate="no"/>
	<primitive-type name="sptr_t"/>
	<primitive-type name="uptr_t"/>
	<value-type name="Sci_NotifyHeader" />
	<rejection class="Sci_NotifyHeader" field-name="hwndFrom" />
	<value-type name="SCNotification" />
	<object-type name="ScintillaEditBase" />
	<object-type name="ScintillaEdit">
	<!-- ++Autogenerated start of section automatically generated from Scintilla.iface -->
		<modify-function signature="addText(sptr_t, const char *)">
			<inject-code class="target" position="beginning">
				if (!cppArg1) {
					PyErr_SetString(PyExc_ValueError, "Null string argument");
					return 0;
				}
			</inject-code>
		</modify-function>
		<modify-function signature="insertText(sptr_t, const char *)">
			<inject-code class="target" position="beginning">
				if (!cppArg1) {
					PyErr_SetString(PyExc_ValueError, "Null string argument");
					return 0;
				}
			</inject-code>
		</modify-function>
		<modify-function signature="changeInsertion(sptr_t, const char *)">
			<inject-code class="target" position="beginning">
				if (!cppArg1) {
					PyErr_SetString(PyExc_ValueError, "Null string argument");
					return 0;
				}
			</inject-code>
		</modify-function>
		<modify-function signature="markerDefinePixmap(sptr_t, const char *)">
			<inject-code class="target" position="beginning">
				if (!cppArg1) {
					PyErr_SetString(PyExc_ValueError, "Null string argument");
					return 0;
				}
			</inject-code>
		</modify-function>
		<modify-function signature="styleSetFont(sptr_t, const char *)">
			<inject-code class="target" position="beginning">
				if (!cppArg1) {
					PyErr_SetString(PyExc_ValueError, "Null string argument");
					return 0;
				}
			</inject-code>
		</modify-function>
		<modify-function signature="setStylingEx(sptr_t, const char *)">
			<inject-code class="target" position="beginning">
				if (!cppArg1) {
					PyErr_SetString(PyExc_ValueError, "Null string argument");
					return 0;
				}
			</inject-code>
		</modify-function>
		<modify-function signature="setWordChars(const char *)">
			<inject-code class="target" position="beginning">
				if (!cppArg0) {
					PyErr_SetString(PyExc_ValueError, "Null string argument");
					return 0;
				}
			</inject-code>
		</modify-function>
		<modify-function signature="autoCShow(sptr_t, const char *)">
			<inject-code class="target" position="beginning">
				if (!cppArg1) {
					PyErr_SetString(PyExc_ValueError, "Null string argument");
					return 0;
				}
			</inject-code>
		</modify-function>
		<modify-function signature="autoCStops(const char *)">
			<inject-code class="target" position="beginning">
				if (!cppArg0) {
					PyErr_SetString(PyExc_ValueError, "Null string argument");
					return 0;
				}
			</inject-code>
		</modify-function>
		<modify-function signature="autoCSelect(const char *)">
			<inject-code class="target" position="beginning">
				if (!cppArg0) {
					PyErr_SetString(PyExc_ValueError, "Null string argument");
					return 0;
				}
			</inject-code>
		</modify-function>
		<modify-function signature="autoCSetFillUps(const char *)">
			<inject-code class="target" position="beginning">
				if (!cppArg0) {
					PyErr_SetString(PyExc_ValueError, "Null string argument");
					return 0;
				}
			</inject-code>
		</modify-function>
		<modify-function signature="userListShow(sptr_t, const char *)">
			<inject-code class="target" position="beginning">
				if (!cppArg1) {
					PyErr_SetString(PyExc_ValueError, "Null string argument");
					return 0;
				}
			</inject-code>
		</modify-function>
		<modify-function signature="registerImage(sptr_t, const char *)">
			<inject-code class="target" position="beginning">
				if (!cppArg1) {
					PyErr_SetString(PyExc_ValueError, "Null string argument");
					return 0;
				}
			</inject-code>
		</modify-function>
		<modify-function signature="replaceSel(const char *)">
			<inject-code class="target" position="beginning">
				if (!cppArg0) {
					PyErr_SetString(PyExc_ValueError, "Null string argument");
					return 0;
				}
			</inject-code>
		</modify-function>
		<modify-function signature="setText(const char *)">
			<inject-code class="target" position="beginning">
				if (!cppArg0) {
					PyErr_SetString(PyExc_ValueError, "Null string argument");
					return 0;
				}
			</inject-code>
		</modify-function>
		<modify-function signature="replaceTarget(sptr_t, const char *)">
			<inject-code class="target" position="beginning">
				if (!cppArg1) {
					PyErr_SetString(PyExc_ValueError, "Null string argument");
					return 0;
				}
			</inject-code>
		</modify-function>
		<modify-function signature="replaceTargetRE(sptr_t, const char *)">
			<inject-code class="target" position="beginning">
				if (!cppArg1) {
					PyErr_SetString(PyExc_ValueError, "Null string argument");
					return 0;
				}
			</inject-code>
		</modify-function>
		<modify-function signature="searchInTarget(sptr_t, const char *)">
			<inject-code class="target" position="beginning">
				if (!cppArg1) {
					PyErr_SetString(PyExc_ValueError, "Null string argument");
					return 0;
				}
			</inject-code>
		</modify-function>
		<modify-function signature="callTipShow(sptr_t, const char *)">
			<inject-code class="target" position="beginning">
				if (!cppArg1) {
					PyErr_SetString(PyExc_ValueError, "Null string argument");
					return 0;
				}
			</inject-code>
		</modify-function>
		<modify-function signature="toggleFoldShowText(sptr_t, const char *)">
			<inject-code class="target" position="beginning">
				if (!cppArg1) {
					PyErr_SetString(PyExc_ValueError, "Null string argument");
					return 0;
				}
			</inject-code>
		</modify-function>
		<modify-function signature="setDefaultFoldDisplayText(const char *)">
			<inject-code class="target" position="beginning">
				if (!cppArg0) {
					PyErr_SetString(PyExc_ValueError, "Null string argument");
					return 0;
				}
			</inject-code>
		</modify-function>
		<modify-function signature="textWidth(sptr_t, const char *)">
			<inject-code class="target" position="beginning">
				if (!cppArg1) {
					PyErr_SetString(PyExc_ValueError, "Null string argument");
					return 0;
				}
			</inject-code>
		</modify-function>
		<modify-function signature="appendText(sptr_t, const char *)">
			<inject-code class="target" position="beginning">
				if (!cppArg1) {
					PyErr_SetString(PyExc_ValueError, "Null string argument");
					return 0;
				}
			</inject-code>
		</modify-function>
		<modify-function signature="searchNext(sptr_t, const char *)">
			<inject-code class="target" position="beginning">
				if (!cppArg1) {
					PyErr_SetString(PyExc_ValueError, "Null string argument");
					return 0;
				}
			</inject-code>
		</modify-function>
		<modify-function signature="searchPrev(sptr_t, const char *)">
			<inject-code class="target" position="beginning">
				if (!cppArg1) {
					PyErr_SetString(PyExc_ValueError, "Null string argument");
					return 0;
				}
			</inject-code>
		</modify-function>
		<modify-function signature="copyText(sptr_t, const char *)">
			<inject-code class="target" position="beginning">
				if (!cppArg1) {
					PyErr_SetString(PyExc_ValueError, "Null string argument");
					return 0;
				}
			</inject-code>
		</modify-function>
		<modify-function signature="setWhitespaceChars(const char *)">
			<inject-code class="target" position="beginning">
				if (!cppArg0) {
					PyErr_SetString(PyExc_ValueError, "Null string argument");
					return 0;
				}
			</inject-code>
		</modify-function>
		<modify-function signature="setPunctuationChars(const char *)">
			<inject-code class="target" position="beginning">
				if (!cppArg0) {
					PyErr_SetString(PyExc_ValueError, "Null string argument");
					return 0;
				}
			</inject-code>
		</modify-function>
		<modify-function signature="encodedFromUTF8(const char *)">
			<inject-code class="target" position="beginning">
				if (!cppArg0) {
					PyErr_SetString(PyExc_ValueError, "Null string argument");
					return 0;
				}
			</inject-code>
		</modify-function>
		<modify-function signature="marginSetText(sptr_t, const char *)">
			<inject-code class="target" position="beginning">
				if (!cppArg1) {
					PyErr_SetString(PyExc_ValueError, "Null string argument");
					return 0;
				}
			</inject-code>
		</modify-function>
		<modify-function signature="marginSetStyles(sptr_t, const char *)">
			<inject-code class="target" position="beginning">
				if (!cppArg1) {
					PyErr_SetString(PyExc_ValueError, "Null string argument");
					return 0;
				}
			</inject-code>
		</modify-function>
		<modify-function signature="annotationSetText(sptr_t, const char *)">
			<inject-code class="target" position="beginning">
				if (!cppArg1) {
					PyErr_SetString(PyExc_ValueError, "Null string argument");
					return 0;
				}
			</inject-code>
		</modify-function>
		<modify-function signature="annotationSetStyles(sptr_t, const char *)">
			<inject-code class="target" position="beginning">
				if (!cppArg1) {
					PyErr_SetString(PyExc_ValueError, "Null string argument");
					return 0;
				}
			</inject-code>
		</modify-function>
		<modify-function signature="markerDefineRGBAImage(sptr_t, const char *)">
			<inject-code class="target" position="beginning">
				if (!cppArg1) {
					PyErr_SetString(PyExc_ValueError, "Null string argument");
					return 0;
				}
			</inject-code>
		</modify-function>
		<modify-function signature="registerRGBAImage(sptr_t, const char *)">
			<inject-code class="target" position="beginning">
				if (!cppArg1) {
					PyErr_SetString(PyExc_ValueError, "Null string argument");
					return 0;
				}
			</inject-code>
		</modify-function>
		<modify-function signature="setRepresentation(const char *, const char *)">
			<inject-code class="target" position="beginning">
				if (!cppArg0) {
					PyErr_SetString(PyExc_ValueError, "Null string argument");
					return 0;
				}
				if (!cppArg1) {
					PyErr_SetString(PyExc_ValueError, "Null string argument");
					return 0;
				}
			</inject-code>
		</modify-function>
		<modify-function signature="representation(const char *) const">
			<inject-code class="target" position="beginning">
				if (!cppArg0) {
					PyErr_SetString(PyExc_ValueError, "Null string argument");
					return 0;
				}
			</inject-code>
		</modify-function>
		<modify-function signature="clearRepresentation(const char *)">
			<inject-code class="target" position="beginning">
				if (!cppArg0) {
					PyErr_SetString(PyExc_ValueError, "Null string argument");
					return 0;
				}
			</inject-code>
		</modify-function>
		<modify-function signature="setProperty(const char *, const char *)">
			<inject-code class="target" position="beginning">
				if (!cppArg0) {
					PyErr_SetString(PyExc_ValueError, "Null string argument");
					return 0;
				}
				if (!cppArg1) {
					PyErr_SetString(PyExc_ValueError, "Null string argument");
					return 0;
				}
			</inject-code>
		</modify-function>
		<modify-function signature="setKeyWords(sptr_t, const char *)">
			<inject-code class="target" position="beginning">
				if (!cppArg1) {
					PyErr_SetString(PyExc_ValueError, "Null string argument");
					return 0;
				}
			</inject-code>
		</modify-function>
		<modify-function signature="setLexerLanguage(const char *)">
			<inject-code class="target" position="beginning">
				if (!cppArg0) {
					PyErr_SetString(PyExc_ValueError, "Null string argument");
					return 0;
				}
			</inject-code>
		</modify-function>
		<modify-function signature="loadLexerLibrary(const char *)">
			<inject-code class="target" position="beginning">
				if (!cppArg0) {
					PyErr_SetString(PyExc_ValueError, "Null string argument");
					return 0;
				}
			</inject-code>
		</modify-function>
		<modify-function signature="property(const char *) const">
			<inject-code class="target" position="beginning">
				if (!cppArg0) {
					PyErr_SetString(PyExc_ValueError, "Null string argument");
					return 0;
				}
			</inject-code>
		</modify-function>
		<modify-function signature="propertyExpanded(const char *) const">
			<inject-code class="target" position="beginning">
				if (!cppArg0) {
					PyErr_SetString(PyExc_ValueError, "Null string argument");
					return 0;
				}
			</inject-code>
		</modify-function>
		<modify-function signature="propertyInt(const char *, sptr_t) const">
			<inject-code class="target" position="beginning">
				if (!cppArg0) {
					PyErr_SetString(PyExc_ValueError, "Null string argument");
					return 0;
				}
			</inject-code>
		</modify-function>
		<modify-function signature="propertyType(const char *)">
			<inject-code class="target" position="beginning">
				if (!cppArg0) {
					PyErr_SetString(PyExc_ValueError, "Null string argument");
					return 0;
				}
			</inject-code>
		</modify-function>
		<modify-function signature="describeProperty(const char *)">
			<inject-code class="target" position="beginning">
				if (!cppArg0) {
					PyErr_SetString(PyExc_ValueError, "Null string argument");
					return 0;
				}
			</inject-code>
		</modify-function>
		<modify-function signature="setIdentifiers(sptr_t, const char *)">
			<inject-code class="target" position="beginning">
				if (!cppArg1) {
					PyErr_SetString(PyExc_ValueError, "Null string argument");
					return 0;
				}
			</inject-code>
		</modify-function>
	<!-- ~~Autogenerated end of section automatically generated from Scintilla.iface -->

	<!-- Custom implementation of get and set_margin_mask_n: mask is defined
	     as an int but is really a bitfield and the numeric value can be
	     greater than max value of an int -->
		<modify-function signature="set_margin_mask_n(sptr_t, sptr_t)">
			<inject-code>
				int margin = PyInt_AsLong(%PYARG_1);
				if (margin == -1 &amp;&amp; PyErr_Occurred())
					return NULL;
				unsigned long mask = PyInt_AsUnsignedLongMask(%PYARG_2);
				if (margin == -1 &amp;&amp; PyErr_Occurred())
					return NULL;

				%CPPSELF-&gt;set_margin_mask_n(margin, static_cast&lt;int&gt;(mask));
				Py_RETURN_NONE;
			</inject-code>
		</modify-function>
		<modify-function signature="get_margin_mask_n(sptr_t) const">
			<inject-code>
				int margin = PyInt_AsLong(%PYARG_1);
				if (margin == -1 &amp;&amp; PyErr_Occurred())
					return NULL;
				unsigned int mask = (unsigned int)%CPPSELF-&gt;get_margin_mask_n(margin);
				%PYARG_0 = PyInt_FromSize_t(mask);
			</inject-code>
		</modify-function>
		<modify-function signature="setMarginMaskN(sptr_t, sptr_t)">
			<inject-code>
				int margin = PyInt_AsLong(%PYARG_1);
				if (margin == -1 &amp;&amp; PyErr_Occurred())
					return NULL;
				unsigned long mask = PyInt_AsUnsignedLongMask(%PYARG_2);
				if (margin == -1 &amp;&amp; PyErr_Occurred())
					return NULL;

				%CPPSELF-&gt;setMarginMaskN(margin, static_cast&lt;int&gt;(mask));
				Py_RETURN_NONE;
			</inject-code>
		</modify-function>
		<modify-function signature="marginMaskN(sptr_t) const">
			<inject-code>
				int margin = PyInt_AsLong(%PYARG_1);
				if (margin == -1 &amp;&amp; PyErr_Occurred())
					return NULL;
				unsigned int mask = (unsigned int)%CPPSELF-&gt;marginMaskN(margin);
				%PYARG_0 = PyInt_FromSize_t(mask);
			</inject-code>
		</modify-function>

	</object-type>
	<object-type name="ScintillaDocument" />
</typesystem>
