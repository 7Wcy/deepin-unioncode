LSP Implementation
------------------
The class Scintilla::LspClient is the interface for the application to manage LSP.
it has methods to :
 - Start/stop the server process
 - Add/remove documents (a document is the pointer obtained by SCI_GETDOCPOINTER)
 - Manage workspaces

all informations obtained by LSP is propagated to the application and/or to the
lexers using notifications.

Need to add an interface [class Process] for every supported platform to start
an external process and communicate with it through stdin/stdout/stderr


LSP Configuration
-----------------
Need to know the uri of a document: cannot add a document to LSP without a
corresponding uri.
The application must remove a document before changing the associated file name,
and add it again with the new name after.

Notifications
-------------
Need to add notifications for
 - Document uri changed

 - textDocument/documentSymbol : issued in response to a request.
   The request could be made by a lexer or even by the application.
   The notification will be propagated to everyone

Nothing except the time needed stops from implementing other useful functions:
 - textDocument/completion
 - completionItem/resolve
 - textDocument/references
 - textDocument/documentHighlight
 - textDocument/documentSymbol
 - textDocument/onTypeFormatting
 - textDocument/definition
